func playSequence() {
    // Disable user interaction during the sequence playback
    redButton.isEnabled = false
    blueButton.isEnabled = false
    greenButton.isEnabled = false
    yellowButton.isEnabled = false
    
    // Create a DispatchGroup to handle asynchronous playback
    let playbackGroup = DispatchGroup()
    
    // Traverse the color sequence with gradually increasing tone counts
    for tonesToPlay in 1...colorSequence.count {
        playbackGroup.enter()
        
        // Play tones and highlight buttons
        let tones = Array(colorSequence.prefix(tonesToPlay))
        for (index, tone) in tones.enumerated() {
            // Highlight the corresponding button
            highlightButtonForTone(tone)
            
            playTone(tone) {
                // Optional: You can perform actions after each tone is played here
                // For example, remove the highlight or add a delay
                self.unhighlightButtons()
                
                // If it's the last tone, add a delay if needed before checking user input
                if index == tones.count - 1 {
                    DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                        // Check user input and validate it
                        self.checkUserInput(forTones: tones, completion: { isCorrect in
                            if !isCorrect {
                                // If input is incorrect, end the game
                                self.gameOver()
                            }
                            playbackGroup.leave()
                        })
                    }
                }
            }
        }
    }
    
    // When all tones are played and validated, re-enable user interaction
    playbackGroup.notify(queue: .main) {
        self.redButton.isEnabled = true
        self.blueButton.isEnabled = true
        self.greenButton.isEnabled = true
        self.yellowButton.isEnabled = true
    }
}
